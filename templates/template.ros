#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

#+ccl(setf *features* (delete :ipv6 *features*)) ;; ccl

;;; ここに本来のrosファイルが挿入される
;;; shebangだけ削除しておく
{{body|safe}}

(progn ;;init forms
  (declaim (optimize (speed 0) (space 0) (debug 3) (safety 3)))
  (ros:ensure-asdf)
  (setf *features* (delete :ipv6 *features*)) ;; ccl
  #+quicklisp (ql:quickload '(:dexador :uiop :cl-ppcre :jsown :alexandria) :silent nil)
  (cffi:define-foreign-library libcrypto
     (:unix "libcrypto.so.1.0.2k"))
  (cffi:use-foreign-library libcrypto)
  (setf sb-sys::*shared-objects* (mapcar #'(lambda (s) (setf (sb-alien::shared-object-dont-save s) t) s) sb-sys::*shared-objects*))
 )

(defpackage :ros.script.bootstrap.3758360166
  (:use :cl :alexandria))
(in-package :ros.script.bootstrap.3758360166)

(defvar *%handler*)
(defvar *%lambda-task-root*)
(defvar *%aws-lambda-runtime-api*)

(defun %load-envvar ()
  "Loads environment variables to work lambda script correctly."
  (setf *%handler*
        (uiop:getenv "_HANDLER"))
  (setf *%lambda-task-root*
        (uiop:getenv "LAMBDA_TASK_ROOT"))
  (setf *%aws-lambda-runtime-api*
        (uiop:getenv "AWS_LAMBDA_RUNTIME_API")))

(defun %set-json-settings ()
  (setf jsown::*parsed-true-value* t)
  (setf jsown::*parsed-false-value* :f)
  (setf jsown::*parsed-null-value* :null)
  (setf jsown::*parsed-empty-list-value* nil))

(defun retrying-get (&rest rest)
  (flet ((logged-retry ()
           (let ((retries 0))
             (lambda (e)
               (declare (type condition e))
               (when-let ((restart (find-restart 'dex:retry-request e)))
                 (when (< retries 5)
                   (incf retries)
                   (format t "[ERROR] Retrying request for the ~:r time because of error ~a" retries e)
                   (invoke-restart restart)))))))

    ;; This retry is an attempt to handle the errors making syscall poll(2) that
    ;; seem to happen when the process is unfrozen by the lambda runtime.
    (handler-bind ((simple-error (logged-retry)))
      (apply #'dex:get rest))))

(defun %main-loop (handler)
  "Main loop processes lambda requests. Specify function designator with HANDLER."
  (declare (ignorable handler))
  (format t "~S~%" *%aws-lambda-runtime-api*)
  (let ((next-endpoint
          (format nil "http://~A/2018-06-01/runtime/invocation/next" *%aws-lambda-runtime-api*)))
    (loop for (body status headers . nil) = (multiple-value-list (retrying-get next-endpoint))
          as request-id = (gethash "lambda-runtime-aws-request-id" headers)
          as response = (funcall (find-symbol "MAIN" "{{ros-package}}") handler (jsown:parse body))
          as response-endpoint = (format nil "http://~A/2018-06-01/runtime/invocation/~A/response" *%aws-lambda-runtime-api* request-id)
          do (dex:post response-endpoint :content (jsown:to-json response)))))

;; lambda entrypoint
(defun main ()
  (%load-envvar)
  (%set-json-settings)
  (uiop:chdir *%lambda-task-root*)
  (%main-loop *%handler*))
;;; vim: set ft=lisp lisp:
